Assignment name  : ord_alphlong
Expected files   : *.c, *.h
Allowed functions: write, malloc, free
--------------------------------------------------------------------------------

Write a program that takes a string as a parameter and prints its words sorted
in order of their length first and then in alphabetical order on each line:
when we say alphabetical order we ignore the case of letters.

For example aA and Aa are the same but the  original order must remain
(lower and upper case are the same in alphabetical order). If there are
duplicates, they must remain.

If number of parameters is different from 1, the program prints \n.

There will be only spaces, tabs and alphanumeric characters in strings.

You'll print only one space between each word. Nothing before the first and
after the last word of each line.

Examples:

$>./ord_alphlong
$
$>./ord_alphlong "After all this time Always said Snape" | cat -e
all$
said this time$
After Snape$
Always$
$>./ord_alphlong "A a b B cc ca cd" | cat -e
A a b B$
ca cc cd$
$>./ord_alphlong "Never take a gamble you are not prepared to lose" | cat -e
a$
to$
are not you$
lose take$
Never$
gamble$
prepared$
$>

// how about this approach?
// set up an array with malloc
// to hold from that index onward, how long is the run
// and then at the end, look at the array to return the solution.

///////////////////////////////////////////////////////

#include <stdlib.h>
#include "libft.h"

static size_t	ft_count_words(char const *s, char c)
{
	size_t i;
	size_t w;
	size_t flag;

	flag = 0;
	w = 0;
	i = 0;
	while (s[i])
	{
		if (s[i] == c)
			flag = 0;
		else if (flag == 0)
		{
			flag = 1;
			w++;
		}
		i++;
	}
	return (w);
}

static size_t	ft_word_len(char const *s, char c)
{
	size_t l;

	l = 0;
	while (*s != c && *s++)
		l++;
	return (l);
}

char			**ft_strsplit(char const *s, char c)
{
	char	**p;
	size_t	i;
	size_t	j;
	size_t	k;

	if (!s)
		return (NULL);
	if (!(p = (char **)malloc(sizeof(char *) * (ft_count_words(s, c) + 1))))
		return (NULL);
	i = 0;
	k = 0;
	while (i < ft_count_words(s, c))
	{
		j = 0;
		while (s[k] == c && s[k])
			k++;
		if (!(p[i] = (char *)malloc(ft_word_len(&s[k], c) + 1)))
			return (NULL);
		while (s[k] != c && s[k])
			p[i][j++] = s[k++];
		p[i++][j] = '\0';
	}
	p[i] = 0;
	return (p);
}

/*
** //l = ft_word_len(&s[k], c);
** EXAM:  USE ABOVE FOR SPLIT STRING!!!
** Allocates (with malloc(3)) and returns an array
** of “fresh” strings (all ending with ’\0’,
** including the array itself) ob- tained
** by spliting s using the character c as a delimiter.
** If the allocation fails the function returns NULL.
** Example : ft_strsplit("*hello*fellow***students*", ’*’)
** returns the array ["hello", "fellow", "students"].
** The array of “fresh” strings result of the split.
*/
