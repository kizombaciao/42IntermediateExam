Assignment name  : perimeter
Expected files   : perimeter.c
Allowed functions: printf
--------------------------------------------------------------------------------

Implement a function which prints the perimeter of a binary tree.

The perimeter is defined as follows :
- leftmost nodes from top to bottom
- leaf nodes from left to right
- rightmost nodes from bottom to top

The binary tree uses the following node structure :

	struct s_node {
		int           value;
		struct s_node *right;
		struct s_node *left;
	};

The function prints on the standard output the value of the nodes
seperated by a single space and with a new line at the end.

The function must be declared as follows:

	void perimeter(struct s_node *root);


EXAMPLE :

	For the following tree :

	                 92
	                 / \
	                /   \
	               85   26
	              /       \
	             79       64
	              \       / \
	              10     /   \
	              /     /     \
	             39    /       \
	            /     /         \
	           35    /           \
	          /     /             \
	         96    /               \
	              /                 \
	             40                 78
	            / \                 / \
	           /   \               /   \
	          /     \             2    85
	         /       \           / \     \
	        /         \         /   \    51
	       /           \       /     \
	      /             \     33     11
	     88             10     \     /
	    / \             / \    55   99
	   /   \           /   \
	  12   55         52   87
	 /     / \       / \     \
	58    /   \     /   \    31
	     58   41   22   35

	the output would be :

	92 85 79 96 58 58 41 22 35 31 55 99 51 85 78 64 26

=================================================================

perimeter is actually pretty simple, though the subject desribes it very poorly. It wants, in this order:

The root node
The nodes in an unbroken chain of node->left, decending from the root
Any leaf nodes (ones where both left and right child nodes are NULL), ordered left-to-right
The nodes in an unbroken chain of node->right, coming up the right side to the root
The only "trick" to perimeter is avoiding double inclusion. For example, a node at the end of the chain of node->left which is also a leaf node. Or a root node which is also a leaf node.

Example

Here is the tree from the subject, for whom the output is: 92 85 79 96 58 58 41 22 35 31 55 99 51 85 78 64 26

I've marked it up:

Root node is in <>
Leftmost line of descent nodes are in ()
Leaf nodes are in []
Rightmost line of descent nodes are in {}
                 <92>
                  / \
                 /   \
               (85)  {26}
               /       \
             (79)     {64}
               \       / \
               10     /   \
               /     /     \
              39    /       \
             /     /         \
            35    /           \
           /     /             \
         [96]   /               \
               /                 \
              40                {78}
             / \                 / \
            /   \               /   \
           /     \             2    {85}
          /       \           / \     \
         /         \         /   \   {[51]}
        /           \       /     \
       /             \     33     11
      88             10     \     /
     / \             / \   [55] [99]
    /   \           /   \
   12   55         52   87
  /     / \       / \     \
[58]   /   \     /   \    [31]
     [58] [41] [22]  [35]

// Yeah, the subject’s definition of “perimeter” is kinda weird 
and not terribly well-explained. 
When it says “leftmost nodes”, 
it means nodes that are not the right child of their parent, 
and whose parents all the way back to the root are also leftmost nodes. 
So because 10 is the right child of 79, it’s not a leftmost node, 
and none of its descendants are leftmost nodes

// https://github.com/motaylormo/42-Intermediate-Exam/blob/master/3-perimeter/NOTES.md
